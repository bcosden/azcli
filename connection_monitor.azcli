############################################################################
# Created by Jose Moreno
# April 2021
#
# Creates 2 web servers and two polling VMs that will use connection monitor
#   to check availability of each web server.
#
# Tested with zsh
############################################################################


# Variables
rg=monitortest
location1=westeurope
location2=eastus
vm_size=Standard_B1s

# Create RG
az group create -n $rg -l $location1

# Create Web servers
vm_cloudinit_filename=/tmp/cloudinit.txt
cat <<EOF > $vm_cloudinit_filename
#cloud-config
runcmd:
  - apt update && apt install -y python3-pip
  - pip3 install flask
  - wget https://raw.githubusercontent.com/erjosito/azcli/master/myip.py -O /root/myip.py
  - python3 /root/myip.py &
EOF
# Location1
vm_name="web-$location1"
vnet_name="vnet-$location1"
az network vnet create -g $rg -n $vnet_name --address-prefix "10.1.0.0/24" --subnet-name vm --subnet-prefix "10.1.0.0/26" -l $location1
az vm create -n $vm_name -g $rg --image UbuntuLTS --generate-ssh-keys --size $vm_size \
   --vnet-name $vnet_name --subnet vm --public-ip-address "${vm_name}-pip" \
   --custom-data $vm_cloudinit_filename -l $location1
az vm extension set --vm-name $vm_name -g $rg -n NetworkWatcherAgentLinux --publisher Microsoft.Azure.NetworkWatcher --version 1.4
# Location2
vm_name="web-$location2"
vnet_name="vnet-$location2"
az network vnet create -g $rg -n $vnet_name --address-prefix "10.2.0.0/24" --subnet-name vm --subnet-prefix "10.2.0.0/26" -l $location2
az vm create -n $vm_name -g $rg --image UbuntuLTS --generate-ssh-keys --size $vm_size \
   --vnet-name $vnet_name --subnet vm --public-ip-address "${vm_name}-pip" \
   --custom-data $vm_cloudinit_filename -l $location2
az vm extension set --vm-name $vm_name -g $rg -n NetworkWatcherAgentLinux --publisher Microsoft.Azure.NetworkWatcher --version 1.4

# Create pollers
vm_name="poller-$location1"
vnet_name="vnet-$location1"
az vm create -n $vm_name -g $rg -l $location1 --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address "${vm_name}-pip" --vnet-name $vnet_name --size $vm_size --subnet vm
az vm extension set --vm-name $vm_name -g $rg -n NetworkWatcherAgentLinux --publisher Microsoft.Azure.NetworkWatcher --version 1.4
vm_name="poller-$location2"
vnet_name="vnet-$location2"
az vm create -n $vm_name -g $rg -l $location2 --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address "${vm_name}-pip" --vnet-name $vnet_name --size $vm_size --subnet vm
az vm extension set --vm-name $vm_name -g $rg -n NetworkWatcherAgentLinux --publisher Microsoft.Azure.NetworkWatcher --version 1.4

# Peer the vnets
az network vnet peering create -n 1to2 -g $rg --vnet-name "vnet-${location1}" --remote-vnet "vnet-${location2}" --allow-vnet-access --allow-forwarded-traffic
az network vnet peering create -n 2to1 -g $rg --vnet-name "vnet-${location2}" --remote-vnet "vnet-${location1}" --allow-vnet-access --allow-forwarded-traffic

# VM IDs
web1_vm_id=$(az vm show -g $rg --query id -o tsv -n "web-${location1}") && echo $web1_vm_id
web2_vm_id=$(az vm show -g $rg --query id -o tsv -n "web-${location2}") && echo $web2_vm_id
poller1_vm_id=$(az vm show -g $rg --query id -o tsv -n "poller-${location1}") && echo $poller1_vm_id
poller2_vm_id=$(az vm show -g $rg --query id -o tsv -n "poller-${location2}") && echo $poller2_vm_id

# Create connection monitors
# Location1
monitor_name="poller-$location1"
test_name="web-$location1"
az network watcher connection-monitor create -n $monitor_name -g $rg -l $location1 \
    --test-group-name $test_name --endpoint-source-type AzureVM --endpoint-dest-type AzureVM \
    --endpoint-source-resource-id $poller1_vm_id --endpoint-source-name poller1 \
    --endpoint-dest-resource-id $web1_vm_id --endpoint-dest-name web1 \
    --test-config-name HttpConfig --protocol Http --http-port 8080 \
    --http-method GET --https-prefer false --http-path '/api/healthcheck'
az network watcher connection-monitor endpoint add --connection-monitor $monitor_name -l $location1 \
    --resource-id $web2_vm_id --name web2 --type AzureVM --dest-test-groups $test_name
# Location2
monitor_name="poller-$location2"
test_name="web-$location2"
az network watcher connection-monitor create -n $monitor_name -g $rg -l $location2 \
    --test-group-name $test_name --endpoint-source-type AzureVM --endpoint-dest-type AzureVM \
    --endpoint-source-resource-id $poller2_vm_id --endpoint-source-name poller2 \
    --endpoint-dest-resource-id $web1_vm_id --endpoint-dest-name web1 \
    --test-config-name HttpConfig --protocol Http --http-port 8080 \
    --http-method GET --https-prefer false --http-path '/api/healthcheck'
az network watcher connection-monitor endpoint add --connection-monitor $monitor_name -l $location2 \
    --resource-id $web2_vm_id --name web2 --type AzureVM --dest-test-groups $test_name

# Diagnostics
az network watcher connection-monitor list -l $location1 -o table # -g flag not supported
az network watcher connection-monitor list -l $location2 -o table # -g flag not supported

# Looks for connection monitors in the region(s) and represents results
# Get list of log analytics workspace IDs
locations=($location1 $location2)
for location in "${locations[@]}"
do
    logws_id_list=$(az network watcher connection-monitor list -l $location -o tsv --query '[].outputs[].workspaceSettings.workspaceResourceId')
    logws_id_list=$(echo $logws_id_list | sort -u)  # Unique values
done
# Get list of log analytics customerIds
logws_customer_id_list=$(for logws_id in "${logws_id_list[@]}"; do logws_rg=$(echo $logws_id | cut -d/ -f 5); logws_name=$(echo $logws_id | cut -d/ -f 9) && az monitor log-analytics workspace show -n $logws_name -g $logws_rg --query customerId -o tsv; done)
# Get list of tests, sources and destinations
src_query="NWConnectionMonitorTestResult | where TimeGenerated > ago(1h) | distinct SourceName"
src_list=$(for logws_customer_id in "${logws_customer_id_list[@]}"; do az monitor log-analytics query -w $logws_customer_id --analytics-query $src_query --query '[].SourceName' -o tsv; done)
dst_query="NWConnectionMonitorTestResult | where TimeGenerated > ago(1h) | distinct DestinationName"
dst_list=$(for logws_customer_id in "${logws_customer_id_list[@]}"; do az monitor log-analytics query -w $logws_customer_id --analytics-query $dst_query --query '[].DestinationName' -o tsv; done)
cfg_query="NWConnectionMonitorTestResult | where TimeGenerated > ago(1h) | distinct TestConfigurationName"
cfg_list=$(for logws_customer_id in "${logws_customer_id_list[@]}"; do az monitor log-analytics query -w $logws_customer_id --analytics-query $cfg_query --query '[].TestConfigurationName' -o tsv; done)
src_list=$(echo $src_list | sort -u)
dst_list=$(echo $dst_list | sort -u)
# For each source, print the latest results to the destination. Do a separate table per configuration test
interval=5m
while IFS= read -r cfg
do
    echo " **** Test configuration $cfg ****"
    printf "%10s" "Source"
    while IFS= read -r dst
    do
        printf "%10s" $dst
    done <<< "$dst_list"
    printf "\n"
    while IFS= read -r src
    do
        printf "%10s" "$src"
        while IFS= read -r dst
        do
            pass_query="NWConnectionMonitorTestResult | where TimeGenerated > ago($interval) | where SourceName==\"$src\" and DestinationName == \"$dst\" and TestConfigurationName == \"$cfg\" | project TestResult | summarize Pass=countif(TestResult == \"Pass\"), NoPass=countif(TestResult != \"Pass\") | project PassPercent=Pass/(Pass+NoPass)"
            # Browse over the workspaces until something other than "None" arrives
            pass_percent="None"
            for logws_customer_id in "${logws_customer_id_list[@]}"
            do
                if [[ "$pass_percent" == "None" ]]
                then
                    pass_percent=$(az monitor log-analytics query -w $logws_customer_id --analytics-query $pass_query --query '[].PassPercent' -o tsv)
                fi
                printf "%10s" "$pass_percent"
            done
        done <<< "$dst_list"
        printf "\n"
    done <<< "$src_list"
done <<< "$cfg_list"



# Cleanup
# az group delete -n $rg -y --no-wait
# az network watcher connection-monitor delete -n poller-$location1 -l $location1
# az network watcher connection-monitor delete -n poller-$location2 -l $location2
