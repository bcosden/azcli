#################################
# Created by Jose Moreno
# July 2020
#
# Some useful commands around AKS
#################################

# Variables
rg=akstest
location=westcentralus
wait_interval=5s
# AKS
aks_name=aks
aks_rbac=yes
aks_service_cidr=10.0.0.0/16
vm_size=Standard_B2ms    # Other possible values: Standard_B2ms, Standard_D2_v3
preview_version=no
# Vnet
vnet_name=aksVnet
vnet_prefix=10.13.0.0/16
aks_subnet_name=aks
aks_subnet_prefix=10.13.76.0/26  # Min /25 with Azure CNI!
aks2_subnet_name=aks2ndpool
aks2_subnet_prefix=10.13.75.0/24
pod_subnet_name=pods
pod_subnet_prefix=10.13.80.0/24
vm_subnet_name=vm
vm_subnet_prefix=10.13.1.0/24
appgw_subnet_name=AppGateway
appgw_subnet_prefix=10.13.10.0/24
azfw_subnet_prefix=10.13.11.0/24
apim_subnet_prefix=10.13.12.0/24
db_subnet_prefix=10.13.50.0/24
akslb_subnet_prefix=10.13.77.0/24
arm_subnet_prefix=10.13.79.0/24
aci_subnet_prefix=10.13.100.0/24
# Identity
use_msi=yes
# Other resources
kv_name=erjositoKeyvault
acr_name=erjositoAcr

####################
# Helper functions #
####################

# Wait for resource to be created
function wait_until_finished {
     wait_interval=15
     resource_id=$1
     resource_name=$(echo $resource_id | cut -d/ -f 9)
     echo "Waiting for resource $resource_name to finish provisioning..."
     start_time=`date +%s`
     state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     until [[ "$state" == "Succeeded" ]] || [[ "$state" == "Failed" ]] || [[ -z "$state" ]]
     do
        sleep $wait_interval
        state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     done
     if [[ -z "$state" ]]
     then
        echo "Something really bad happened..."
     else
        run_time=$(expr `date +%s` - $start_time)
        ((minutes=${run_time}/60))
        ((seconds=${run_time}%60))
        echo "Resource $resource_name provisioning state is $state, wait time $minutes minutes and $seconds seconds"
     fi
}

###################
# Enable features #
###################

function enableAksFeature () {
    feature_name=$1
    state=$(az feature list -o table --query "[?contains(name, 'microsoft.containerservice/$feature_name')].properties.state" -o tsv)
    if [[ "$state" == "Registered" ]]
    then
        echo "$feature_name is already registered"
    else
        echo "Registering feature $feature_name..."
        az feature register --name "$feature_name" --namespace microsoft.containerservice
        state=$(az feature list -o table --query "[?contains(name, 'microsoft.containerservice/$feature_name')].properties.state" -o tsv)
        echo "Waiting for feature $feature_name to finish registering..."
        wait_interval=15
        until [[ "$state" == "Registered" ]]
        do
            sleep $wait_interval
            state=$(az feature list -o table --query "[?contains(name, 'microsoft.containerservice/$feature_name')].properties.state" -o tsv)
            echo "Current registration status for feature $feature_name is $state"
        done
        echo "Registering resource provider Microsoft.ContainerService now..."
        az provider register --namespace Microsoft.ContainerService
    fi
}

enableAksFeature "AKS-IngressApplicationGatewayAddon"
enableAksFeature "EnablePodIdentityPreview"
enableAksFeature "MigrateToMSIClusterPreview"
enableAksFeature "PodSubnetPreview"

# Update extension
az extension update -n aks-preview

########
# Main #
########

# Create RG, LA workspace, vnet, AKS
az group create -n $rg -l $location
acr_rg=$(az acr list -o tsv --query "[?name=='$acr_name'].resourceGroup")
acr_id=$(az acr show -n erjositoAcr -g $acr_rg --query id -o tsv)
az network vnet create -g $rg -n $vnet_name --address-prefix $vnet_prefix -l $location
az network vnet subnet create -g $rg -n $aks_subnet_name --vnet-name $vnet_name --address-prefix $aks_subnet_prefix
az network vnet subnet create -g $rg -n $pod_subnet_name --vnet-name $vnet_name --address-prefix $pod_subnet_prefix
aks_subnet_id=$(az network vnet subnet show -n $aks_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
pod_subnet_id=$(az network vnet subnet show -n $pod_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)

# Create LA workspace
# Create Log Analytics workspace
logws_name=$(az monitor log-analytics workspace list -g $rg --query '[0].name' -o tsv)
if [[ -z "$logws_name" ]]
then
    logws_name=log$RANDOM
    echo "INFO: Creating log analytics workspace ${logws_name}..."
    az monitor log-analytics workspace create -n $logws_name -g $rg
else
    echo "INFO: Log Analytics workspace $logws_name found in resource group $rg"
fi
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)

# Get latest supported/preview version
k8s_versions=$(az aks get-versions -l $location -o json)
if [[ "$preview_version" == "yes" ]]
then
    k8s_version=$(echo $k8s_versions | jq '.orchestrators[]' | jq -rsc 'sort_by(.orchestratorVersion) | reverse[0] | .orchestratorVersion')
    echo "Latest supported k8s version in $rg_location is $k8s_version (in preview)"
else
    k8s_version=$(echo $k8s_versions | jq '.orchestrators[] | select(.isPreview == null)' | jq -rsc 'sort_by(.orchestratorVersion) | reverse[0] | .orchestratorVersion')
    echo "Latest supported k8s version (not in preview) in $rg_location is $k8s_version"
fi

# Setting identity flags (managed identity or SP)
if [[ "$use_msi" == no ]]
then
    # Get SP from AKV
    keyvault_name=joseakv-airs
    purpose=aks
    keyvault_appid_secret_name=$purpose-sp-appid
    keyvault_password_secret_name=$purpose-sp-secret
    sp_app_id=$(az keyvault secret show --vault-name $keyvault_name -n $keyvault_appid_secret_name --query 'value' -o tsv) && echo $sp_app_id
    sp_app_secret=$(az keyvault secret show --vault-name $keyvault_name -n $keyvault_password_secret_name --query 'value' -o tsv)

    # Assign contributor role to the vnet
    vnet_id=$(az network vnet show -n $vnet_name -g $rg --query id -o tsv)
    az role assignment create --scope $vnet_id --assignee $sp_app_id --role Contributor
    # az aks create flags
    identity_options="--service-principal $sp_app_id --client-secret $sp_app_secret --skip-subnet-role-assignment"
else
    # User identity
    id_name=aksid
    id_id=$(az identity show -n $id_name -g $rg --query id -o tsv)
    if [[ -z "$id_id" ]]
    then
        echo "Identity $id_name not found, creating a new..."
        az identity create -n $id_name -g $rg
        id_id=$(az identity show -n $id_name -g $rg --query id -o tsv)
    else
        echo "Identity $id_name found with ID $id_id"
    fi
    id_principal_id=$(az identity show -n $id_name -g $rg --query principalId -o tsv)
    vnet_id=$(az network vnet show -n $vnet_name -g $rg --query id -o tsv)
    az role assignment create --scope $vnet_id --assignee $id_principal_id --role Contributor
    # User identity
    identity_options="--enable-managed-identity --assign-identity $id_id"
    # System identity
    # identity_options="--enable-managed-identity"
fi

# Create AKS
az aks create -g $rg -n $aks_name -l $location \
    -c 1 -s $vm_size -k $k8s_version --generate-ssh-keys -u $(whoami) \
    ${(z)identity_options} \
    --network-plugin azure --vnet-subnet-id $aks_subnet_id --service-cidr $aks_service_cidr \
    --network-policy 'azure' --load-balancer-sku Standard \
    --node-resource-group "$aks_name"-iaas-"$RANDOM" \
    --node-osdisk-type ephemeral --node-osdisk-size 30 \
    --uptime-sla \
    --no-wait

# Other options you can use in the previous command
    # --enable-private-cluster \
    # --pod-subnet-id $pod_subnet_id \
    # --enable-pod-security-policy \
    # --enable-cluster-autoscaler --min-count 1 --max-count 3 \
    # --cluster-autoscaler-profile scan-interval=30s \
    # --dns-name-prefix cloudtrooper \
    # --node-osdisk-type ephemeral --node-osdisk-size 30 \
    # --outbound-type userDefinedRouting \
    # --aks-custom-headers EnableAzureDiskFileCSIDriver=true \
    # --os-sku Mariner \
    # --uptime-sla

########
# Wait #
########

aks_id=$(az aks show -n $aks_name -g $rg --query id -o tsv)
wait_until_finished $aks_id

# Get credentials for kubectl
az aks list -o table
az aks get-credentials -n $aks_name -g $rg --overwrite
kubectl get nodes

######################
# Modify the cluster #
######################

# Enable monitoring addon
az aks enable-addons -g $rg -n $aks_name --addons monitoring --workspace-resource-id "$logws_id"

# Enable AKV addon (Work In Progress)
az aks enable-addons -g $rg -n $aks_name --addons azure-keyvault-secrets-provider

# Add cluster autoscaler (requires the monitoring addon)
az aks update -g $rg -n $aks_name --enable-cluster-autoscaler --min-count 1 --max-count 4

# Modify autoscaler profile (see https://docs.microsoft.com/azure/aks/cluster-autoscaler#using-the-autoscaler-profile)
az aks update -g $rg -n $aks_name --cluster-autoscaler-profile scale-down-unneeded-time=1m

# Add diag settings for cluster logs
aks_id=$(az aks show -n $aks_name -g $rg --query id -o tsv)
az monitor diagnostic-settings create -n mydiag --resource $aks_id --workspace $logws_id \
    --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
    --logs '[{"category": "kube-apiserver", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
            {"category": "kube-audit", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "kube-audit-admin", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "kube-controller-manager", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "kube-scheduler", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "cluster-autoscaler", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "guard", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'

# Migrate to MSI
az aks update -g $rg -n $aks_name --enable-managed-identity -y

# Update to new version
new_aks_version=1.21.2
az aks upgrade -n $aks_name -g $rg -k $new_aks_version -y

#####################
# Add a second pool #
#####################

az network vnet subnet create -g $rg -n $aks2_subnet_name --vnet-name $vnet_name --address-prefix $aks2_subnet_prefix
vm_size=Standard_DS3_v2
aks2_subnet_id=$(az network vnet subnet show -n $aks2_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
az aks nodepool add --cluster-name $aks_name -g $rg -n pool2 --node-count 1 -s $vm_size \
    --enable-cluster-autoscaler --min-count 1 --max-count 2 \
    -k $k8s_version --mode User --vnet-subnet-id $aks2_subnet_id \
    --node-osdisk-type Ephemeral
az aks nodepool list --cluster-name $aks_name -g $rg -o table

###########################
# Deploy sample workloads #
###########################

az aks get-credentials -n $aks_name -g $rg --overwrite
kubectl create deployment kuard --image=gcr.io/kuar-demo/kuard-amd64:blue --port=8080 --replicas=1
kubectl create deployment sqlapi --image=erjosito/sqlapi:1.0 --port=8080 --replicas=1

# Service
yaml_file=/tmp/svc.yaml
cat <<EOF > $yaml_file
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: kuard
spec:
  type: LoadBalancer
  ports:
  - port: 8080
  selector:
    app: kuard
EOF
kubectl apply -f $yaml_file

# Service with Static PIP
svc_pip_name=k8ssvcpip
az network public-ip create -g $rg -n $svc_pip_name --sku Standard --allocation-method static
svc_pip_ip=$(az network public-ip show -n $svc_pip_name -g $rg --query ipAddress -o tsv) && echo $svc_pip_ip
svc_pip_id=$(az network public-ip show -n $svc_pip_name -g $rg --query id -o tsv) && echo $svc_pip_id
if [[ "$use_msi" == no ]]
then
    client_id=$sp_app_id
else
    client_id=$id_principal_id
fi
az role assignment create --assignee $client_id --role "Network Contributor" --scope $svc_pip_id
yaml_file=/tmp/svc.yaml
cat <<EOF > $yaml_file
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $rg
  name: kuard
spec:
  loadBalancerIP: $svc_pip_ip
  type: LoadBalancer
  ports:
  - port: 8080
  selector:
    app: kuard
EOF
kubectl apply -f $yaml_file
echo "Browse to http://$svc_pip_ip:8080"

# Workload with PV/PVC
yaml_file=/tmp/pvc.yaml
cat <<EOF > $yaml_file
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: premiumpvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 5Gi
---
kind: Pod
apiVersion: v1
metadata:
  name: sqlapi
  labels:
    run: sqlapi
spec:
  containers:
  - name: mypod
    image: erjosito/sqlapi:1.0
    imagePullPolicy: Always
    resources:
      requests:
        cpu: 250m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 256Mi
    volumeMounts:
    - mountPath: "/mnt/azure"
      name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: premiumpvc
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: sqlapi
  name: sqlapi
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    run: sqlapi
  sessionAffinity: None
  type: LoadBalancer
EOF
kubectl apply -f $yaml_file
# Diagnostics
k get sc
k get pvc
k get pv
k get svc
node1_name=$(k get node -o jsonpath='{.items[0].metadata.name}') && echo $node1_name
node1_drivers=$(kubectl get CSINode $node1_name -o jsonpath="{.spec.drivers}") && echo $node1_drivers
node1_disk_count=$(kubectl get CSINode $node1_name -o jsonpath="{.spec.drivers[1].allocatable.count}") && echo $node1_disk_count
svc_ip=$(kubectl get svc/sqlapi -o json | jq -rc '.status.loadBalancer.ingress[0].ip' 2>/dev/null) && echo $svc_ip
curl "http://${svc_ip}/api/healthcheck"
curl "http://${svc_ip}/api/healthcheck/api/ioperf?file=%2Fmnt%2Fazure%2Fiotest"

##############################
# Daemonset to install stuff #
##############################

kubectl create ns node-installer
yaml_file=/tmp/podid.yaml
cat <<EOF > $yaml_file
apiVersion: v1
kind: ConfigMap
metadata:
  name: sample-installer-config
  namespace: node-installer
data:
  install.sh: |
    #!/bin/bash
    # echo "Updating repositories..."
    # sudo touch /var/lib/man-db/auto-update
    # apt-get update
    # echo "Installing sample app..."
    # apt-get install cowsay -y
    echo "Restarting containerd..."
    # service containerd restart
    systemctl restart containerd
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: installer
  namespace: node-installer
spec:
  selector:
    matchLabels:
      job: installer
  template:
    metadata:
      labels:
        job: installer
    spec:
      hostPID: true
      restartPolicy: Always
      containers:
      - image: patnaikshekhar/node-installer:1.3
        name: installer
        securityContext:
          privileged: true
        volumeMounts:
        - name: install-script
          mountPath: /tmp
        - name: host-mount
          mountPath: /host
      volumes:
      - name: install-script
        configMap:
          name: sample-installer-config
      - name: host-mount
        hostPath:
          path: /tmp/install
EOF
kubectl apply -f $yaml_file

#####################
#   Azure Advisor   #
#####################

aks_id=$(az aks show -n $aks_name -g $rg --query id -o tsv)
az advisor recommendation list --ids $aks_id -o table

#######################
# Pod Identity - Helm #
#######################

# Pod identity
id_name=apppodid
az identity create --resource-group $rg --name $id_name
id_client_id="$(az identity show -g $rg -n $id_name --query clientId -o tsv)" && echo $id_client_id
id_arm_id="$(az identity show -g $rg -n $id_name --query id -o tsv)" && echo $id_arm_id
az aks update -n $aks_name -g $rg --enable-pod-identity
podid_ns=default
az aks pod-identity add -g $rg --cluster-name $aks_name --namespace $podid_ns --name $id_name --identity-resource-id $id_arm_id
node_rg=$(az aks show -n $aks_name -g $rg --query nodeResourceGroup -o tsv) && echo $node_rg
node_rg_id=$(az group show -n $node_rg --query id -o tsv) && echo $node_rg_id
rg_id=$(az group show -n $rg --query id -o tsv) && echo $rg_id
az role assignment create --role "Reader" --assignee "$id_client_id" --scope $node_rg_id
az role assignment create --role "Reader" --assignee "$id_client_id" --scope $rg_id
subscription_id=$(az account show --query id -o tsv) && echo $subscription_id
yaml_file=/tmp/podid.yaml
cat <<EOF > $yaml_file
apiVersion: v1
kind: Pod
metadata:
  name: demo
  labels:
    aadpodidbinding: $id_name
spec:
  containers:
  - name: demo
    image: mcr.microsoft.com/oss/azure/aad-pod-identity/demo:v1.6.3
    args:
      - --subscriptionid=$subscription_id
      - --clientid=$id_client_id
      - --resourcegroup=$rg
    env:
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: MY_POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
  nodeSelector:
    kubernetes.io/os: linux
EOF
kubectl apply -f $yaml_file --namespace $podid_ns
kubectl logs demo --follow --namespace $podid_ns
az aks pod-identity list --cluster-name $aks_name -g $rg -o table
az aks pod-identity exception list --cluster-name $aks_name -g $rg -o table

#########
# kured #
#########

helm repo add kured https://weaveworks.github.io/kured
helm repo update
kubectl create namespace kured
helm install kured kured/kured --namespace kured --set nodeSelector."beta\.kubernetes\.io/os"=linux

#######################
# Jump host / test VM #
#######################

vm_name=testvm
vm_pip_name=testvm-pip
vm_sku=Standard_B1s
az network vnet subnet create -g $rg -n $vm_subnet_name --vnet-name $vnet_name --address-prefix $vm_subnet_prefix
az vm create -n $vm_name -g $rg --image UbuntuLTS --generate-ssh-keys --size $vm_sku -l $location \
   --vnet-name $vnet_name --subnet $vm_subnet_name --public-ip-address $vm_pip_name
vm_pip_address=$(az network public-ip show -n $vm_pip_name -g $rg --query ipAddress -o tsv) && echo $vm_pip_address
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $vm_pip_address "ip a"
node_ip=$(kubectl get node -o json | jq -r '.items[0].status.addresses[] | select(.type=="InternalIP") | .address') && echo $node_ip
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no -m hmac-sha2-512 -J $vm_pip_address $node_ip "ip a"

##########################
#  Azure Firewall (WIP)  #
##########################

# Variables
azfw_policy_name=aksfwpolicy
azfw_name=aksazfw
azfw_pip_name=${azfw_name}-pip
# Create policy and FW
az network vnet subnet create -g $rg -n AzureFirewallSubnet --vnet-name $vnet_name --address-prefix $azfw_subnet_prefix
az network firewall policy create -n $azfw_policy_name -g $rg
az network public-ip create -g $rg -n $azfw_pip_name --sku standard --allocation-method static -l $location
azfw_ip=$(az network public-ip show -g $rg -n $azfw_pip_name --query ipAddress -o tsv) && echo $azfw_ip
az network firewall create -n $azfw_name -g $rg -l $location
azfw_id=$(az network firewall show -n $azfw_name -g $rg -o tsv --query id)
az network firewall ip-config create -f $azfw_name -n azfw-ipconfig -g $rg --public-ip-address $azfw_pip_name --vnet-name $vnet_name
az network firewall update -n $azfw_name -g $rg
azfw_private_ip=$(az network firewall show -n $azfw_name -g $rg -o tsv --query 'ipConfigurations[0].privateIpAddress') && echo $azfw_private_ip
# Enable logging
logws_name=$(az monitor log-analytics workspace list -g $rg --query '[0].name' -o tsv)
if [[ -z "$logws_name" ]]
then
    logws_name=log$RANDOM
    echo "INFO: Creating log analytics workspace ${logws_name}..."
    az monitor log-analytics workspace create -n $logws_name -g $rg
else
    echo "INFO: Log Analytics workspace $logws_name found in resource group $rg"
fi
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)
az monitor diagnostic-settings create -n mydiag --resource $azfw_id --workspace $logws_id \
      --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
      --logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
              {"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]' >/dev/null
# Add some rules to the policy (TBD)

# Cleanup
az network firewall delete -n $azfw_name -g $rg -y

###########################
# Logs from Azure Monitor #
###########################

logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)
# Log category summary
summary='AzureDiagnostics
| summarize count() by Category'
az monitor log-analytics query -w $logws_customerid --analytics-query $summary -o tsv
# Cluster autoscaler (see https://docs.microsoft.com/en-us/azure/aks/view-master-logs)
ca_query='AzureDiagnostics
| where Category == "cluster-autoscaler"
//| project log_s
| take 20 '
az monitor log-analytics query -w $logws_customerid --analytics-query $ca_query -o tsv
# Kube scheduler
sched_query='AzureDiagnostics
| where Category == "kube-scheduler"
//| project log_s
| take 20 '
az monitor log-analytics query -w $logws_customerid --analytics-query $sched_query -o tsv
# audit-admin (from our IP)
myip=$(curl -s4 ifconfig.co)
admin_query='AzureDiagnostics
| where TimeGenerated > ago(1d) 
| where Category == "kube-audit-admin"
| extend log_j = parse_json(log_s)
| extend log_kind = log_j.kind, log_verb = log_j.verb, log_sourceIP = log_j.sourceIPs[0], log_username= log_j.user.username
| extend log_object_resource=log_j.objectRef.resource, log_object_subresource=log_j.objectRef.subresource, log_object_name=log_j.objectRef.name, log_object_namespace=log_j.objectRef.namespace
| project TimeGenerated, log_sourceIP, log_kind, log_verb, log_username, log_object_resource,log_object_subresource,log_object_name, log_object_namespace
| where log_sourceIP == "'$myip'"
| take 20 '
az monitor log-analytics query -w $logws_customerid --analytics-query $admin_query -o tsv
# Insights query
insights_query='InsightsMetrics 
//| where Namespace == "kube-system"
//| extend TagInfo = parse_json(Tags)
//| where TagInfo.app !startswith "istio"
//| where TagInfo.app !startswith "cert"
//| where TagInfo.app != ""
| summarize count() by Namespace
'
az monitor log-analytics query -w $logws_customerid --analytics-query $insights_query -o tsv
