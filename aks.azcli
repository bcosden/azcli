#################################
# Created by Jose Moreno
# July 2020
#
# Some useful commands around AKS
#################################

# Variables
rg=akstest
location=westeurope
keyvaultname=erjositoKeyvault
keyvault_rg=myKeyvault
wait_interval=5s
# AKS
aks_name=aks
aks_rbac=yes
aks_service_cidr=10.0.0.0/16
vm_size=Standard_B2ms    # Other possible values: Standard_B2ms, Standard_D2_v3
preview_version=yes
# Vnet
vnet_name=aksVnet
vnet_prefix=10.13.0.0/16
aks_subnet_name=aks
aks_subnet_prefix=10.13.76.0/26  # Min /25 with Azure CNI!
aks2_subnet_name=aks2ndpool
aks2_subnet_prefix=10.13.75.0/24
vm_subnet_name=vm
vm_subnet_prefix=10.13.1.0/24
appgw_subnet_name=AppGateway
appgw_subnet_prefix=10.13.10.0/24
azfw_subnet_prefix=10.13.11.0/24
apim_subnet_prefix=10.13.12.0/24
db_subnet_prefix=10.13.50.0/24
akslb_subnet_prefix=10.13.77.0/24
arm_subnet_prefix=10.13.79.0/24
aci_subnet_prefix=10.13.100.0/24
# Other
logws_name=log$RANDOM
kv_name=erjositoKeyvault
acr_name=erjositoAcr

####################
# Helper functions #
####################

# Wait for resource to be created
function wait_until_finished {
     wait_interval=15
     resource_id=$1
     resource_name=$(echo $resource_id | cut -d/ -f 9)
     echo "Waiting for resource $resource_name to finish provisioning..."
     start_time=`date +%s`
     state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     until [[ "$state" == "Succeeded" ]] || [[ "$state" == "Failed" ]] || [[ -z "$state" ]]
     do
        sleep $wait_interval
        state=$(az resource show --id $resource_id --query properties.provisioningState -o tsv)
     done
     if [[ -z "$state" ]]
     then
        echo "Something really bad happened..."
     else
        run_time=$(expr `date +%s` - $start_time)
        ((minutes=${run_time}/60))
        ((seconds=${run_time}%60))
        echo "Resource $resource_name provisioning state is $state, wait time $minutes minutes and $seconds seconds"
     fi
}

##################
# Enable feature #
##################

# This will not be required after preview any more
az feature register --name AKS-IngressApplicationGatewayAddon --namespace microsoft.containerservice
state=$(az feature list -o table --query "[?contains(name, 'microsoft.containerservice/AKS-IngressApplicationGatewayAddon')].properties.state" -o tsv)
echo "Waiting for feature to finish registering"
wait_interval=15
until [[ "$state" == "Succeeded" ]]
do
    sleep $wait_interval
    state=$(az feature list -o table --query "[?contains(name, 'microsoft.containerservice/AKS-IngressApplicationGatewayAddon')].properties.state" -o tsv)
done
az provider register --namespace Microsoft.ContainerService

########
# Main #
########

# Create RG, LA workspace, vnet, AKS
az group create -n $rg -l $location
az monitor log-analytics workspace create -n $logws_name -g $rg
logws_id=$(az resource list -g $rg -n $logws_name --query '[].id' -o tsv)
acr_rg=$(az acr list -o tsv --query "[?name=='$acr_name'].resourceGroup")
acr_id=$(az acr show -n erjositoAcr -g $acr_rg --query id -o tsv)
az network vnet create -g $rg -n $vnet_name --address-prefix $vnet_prefix -l $location
az network vnet subnet create -g $rg -n $aks_subnet_name --vnet-name $vnet_name --address-prefix $aks_subnet_prefix
aks_subnet_id=$(az network vnet subnet show -n $aks_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)

# Get latest supported/preview version
k8s_versions=$(az aks get-versions -l $location -o json)
if [[ "$preview_version" == "yes" ]]
then
    k8s_version=$(echo $k8s_versions | jq '.orchestrators[]' | jq -rsc 'sort_by(.orchestratorVersion) | reverse[0] | .orchestratorVersion')
    echo "Latest supported k8s version in $rg_location is $k8s_version (in preview)"
else
    k8s_version=$(echo $k8s_versions | jq '.orchestrators[] | select(.isPreview == null)' | jq -rsc 'sort_by(.orchestratorVersion) | reverse[0] | .orchestratorVersion')
    echo "Latest supported k8s version (not in preview) in $rg_location is $k8s_version"
fi

#####################
# With existing SPs #
#####################

# Get SP from AKV
keyvault_name=joseakv-airs
purpose=aks
keyvault_appid_secret_name=$purpose-sp-appid
keyvault_password_secret_name=$purpose-sp-secret
sp_app_id=$(az keyvault secret show --vault-name $keyvault_name -n $keyvault_appid_secret_name --query 'value' -o tsv) && echo $sp_app_id
sp_app_secret=$(az keyvault secret show --vault-name $keyvault_name -n $keyvault_password_secret_name --query 'value' -o tsv)

# Assign contributor role to the vnet
vnet_id=$(az network vnet show -n $vnet_name -g $rg --query id -o tsv)
az role assignment create --scope $vnet_id --assignee $sp_app_id --role Contributor

# Create AKS
az aks create -g $rg -n $aks_name -l $location \
    -c 1 -s $vm_size -k $k8s_version --generate-ssh-keys \
    --service-principal $sp_app_id --client-secret $sp_app_secret --skip-subnet-role-assignment \
    --network-plugin azure --vnet-subnet-id $aks_subnet_id --service-cidr $aks_service_cidr \
    --network-policy '' --load-balancer-sku Standard \
    --node-resource-group "$aks_name"-iaas-"$RANDOM" \
    --node-osdisk-type ephemeral --node-osdisk-size 30 \
    --no-wait

# Other options you can use in the previous command
    # --enable-private-cluster
    # --enable-cluster-autoscaler --min-count 1 --max-count 4 \
    # --cluster-autoscaler-profile scan-interval=30s \
    # --dns-name-prefix cloudtrooper \
    # --node-osdisk-type ephemeral --node-osdisk-size 30 \

#########################
# With managed identity #
#########################

# az aks create -g $rg -n $aks_name -l $location \
#     -c 1 -s $vm_size -k $k8s_version --generate-ssh-keys \
#     --network-plugin azure --vnet-subnet-id $aks_subnet_id --service-cidr $aks_service_cidr \
#     --network-policy calico --load-balancer-sku Standard \
#     --node-resource-group "$aks_name"-iaas-"$RANDOM" \
#     --enable-managed-identity \
#     --no-wait

########
# Wait #
########

aks_id=$(az aks show -n $aks_name -g $rg --query id -o tsv)
wait_until_finished $aks_id

# Get credentials for kubectl
az aks list -o table
az aks get-credentials -n $aks_name -g $rg --overwrite
kubectl get nodes

######################
# Update the cluster #
######################

# Enable monitoring addon
az aks enable-addons -g $rg -n $aks_name --addons monitoring --workspace-resource-id "$logws_id"

# Add cluster autoscaler (requires the monitoring addon)
az aks update -g $rg -n $aks_name --enable-cluster-autoscaler --min-count 1 --max-count 4

# Modify autoscaler profile (see https://docs.microsoft.com/azure/aks/cluster-autoscaler#using-the-autoscaler-profile)
az aks update -g $rg -n $aks_name --cluster-autoscaler-profile scale-down-unneeded-time=1m

# Add diag settings for cluster logs
aks_id=$(az aks show -n $aks_name -g $rg --query id -o tsv)
az monitor diagnostic-settings create -n mydiag --resource $aks_id --workspace $logws_id \
    --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
    --logs '[{"category": "kube-apiserver", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
            {"category": "kube-audit", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "kube-audit-admin", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "kube-controller-manager", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "kube-scheduler", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "cluster-autoscaler", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}},
            {"category": "guard", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'

#####################
# Add a second pool #
#####################

az network vnet subnet create -g $rg -n $aks2_subnet_name --vnet-name $vnet_name --address-prefix $aks2_subnet_prefix
vm_size=Standard_DS3_v2
aks2_subnet_id=$(az network vnet subnet show -n $aks2_subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
az aks nodepool add --cluster-name $aks_name -g $rg -n pool2 --node-count 1 -s $vm_size \
    --enable-cluster-autoscaler --min-count 1 --max-count 2 \
    -k $k8s_version --mode User --vnet-subnet-id $aks2_subnet_id \
    --node-osdisk-type Ephemeral
az aks nodepool list --cluster-name $aks_name -g $rg -o table

###########################
# Deploy sample workloads #
###########################

az aks get-credentials -n $aks_name -g $rg --overwrite
kubectl create deployment kuard --image=gcr.io/kuar-demo/kuard-amd64:blue --port=8080 --replicas=10
kubectl scale deployment kuard --replicas=5

###########################
# Logs from Azure Monitor #
###########################
logws_customerid=$(az monitor log-analytics workspace show -n $logws_name -g $rg --query customerId -o tsv)
# Log category summary
summary='AzureDiagnostics
| summarize count() by Category'
az monitor log-analytics query -w $logws_customerid --analytics-query $summary -o tsv
# Cluster autoscaler (see https://docs.microsoft.com/en-us/azure/aks/view-master-logs)
ca_query='AzureDiagnostics
| where Category == "cluster-autoscaler"
//| project log_s
| take 20 '
az monitor log-analytics query -w $logws_customerid --analytics-query $ca_query -o tsv
# Kube scheduler
sched_query='AzureDiagnostics
| where Category == "kube-scheduler"
//| project log_s
| take 20 '
az monitor log-analytics query -w $logws_customerid --analytics-query $sched_query -o tsv
# audit-admin (from our IP)
myip=$(curl -s4 ifconfig.co)
admin_query='AzureDiagnostics
| where TimeGenerated > ago(1d) 
| where Category == "kube-audit-admin"
| extend log_j = parse_json(log_s)
| extend log_kind = log_j.kind, log_verb = log_j.verb, log_sourceIP = log_j.sourceIPs[0], log_username= log_j.user.username
| extend log_object_resource=log_j.objectRef.resource, log_object_subresource=log_j.objectRef.subresource, log_object_name=log_j.objectRef.name, log_object_namespace=log_j.objectRef.namespace
| project TimeGenerated, log_sourceIP, log_kind, log_verb, log_username, log_object_resource,log_object_subresource,log_object_name, log_object_namespace
| where log_sourceIP == "'$myip'"
| take 20 '
az monitor log-analytics query -w $logws_customerid --analytics-query $admin_query -o tsv
