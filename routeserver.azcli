# Variables
rg=routeserver
location=westeurope
vnet_name=hub
vnet_prefix=10.1.0.0/16
subnet_name=RouteServerSubnet
subnet_prefix=10.1.0.0/24
rs_name=myRouteServer
vm_subnet_name=vm
vm_subnet_prefix=10.1.3.0/24
# GatewaySubnet
gw_subnet_prefix=10.1.254.0/24
# CSR
csr_subnet_name=csr
csr_subnet_prefix=10.1.1.0/24
hub_csr_default_gw=10.1.1.1
hub_csr_bgp_ip=10.1.1.10
# 2ary NIC for CSR
csr2_subnet_name=csr2
csr2_subnet_prefix=10.1.2.0/24

# Create Vnet
az group create -n $rg -l $location
az network vnet create -g $rg -n $vnet_name --address-prefix $vnet_prefix --subnet-name $subnet_name --subnet-prefix $subnet_prefix

# Create subnets (no subnet can be created while the route server is being provisioned)
az network vnet subnet create -n $csr_subnet_name --address-prefix $csr_subnet_prefix --vnet-name $vnet_name -g $rg
az network vnet subnet create -n $csr2_subnet_name --address-prefix $csr2_subnet_prefix --vnet-name $vnet_name -g $rg
az network vnet subnet create -n $vm_subnet_name --address-prefix $vm_subnet_prefix --vnet-name $vnet_name -g $rg
az network vnet subnet create -n GatewaySubnet --address-prefix $gw_subnet_prefix --vnet-name $vnet_name -g $rg

# Create Route Server
subnet_id=$(az network vnet subnet show -n $subnet_name --vnet-name $vnet_name -g $rg --query id -o tsv)
az network routeserver create -n $rs_name -g $rg --hosted-subnet $subnet_id -l $location
az network routeserver update -n $rs_name -g $rg --allow-b2b-traffic true

# Get info (once created)
rs_ip1=$(az network routeserver show -n $rs_name -g $rg --query 'virtualRouterIps[0]' -o tsv) && echo $rs_ip1
rs_ip2=$(az network routeserver show -n $rs_name -g $rg --query 'virtualRouterIps[1]' -o tsv) && echo $rs_ip2
rs_asn=$(az network routeserver show -n $rs_name -g $rg --query 'virtualRouterAsn' -o tsv) && echo $rs_asn

# Create VM in hub
az vm create -n hub-vm -g $rg -l $location --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address hub-vm-pip --vnet-name $vnet_name --size Standard_B1s --subnet $vm_subnet_name
hub_vm_ip=$(az network public-ip show -n hub-vm-pip --query ipAddress -o tsv -g $rg)
hub_vm_nic_id=$(az vm show -n spoke1-vm -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
hub_vm_private_ip=$(az network nic show --ids $hub_vm_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv) && echo $spoke1_private_ip

# Create CSR in hub
# Variables
publisher=cisco
offer=cisco-csr-1000v
sku=16_12-byol
csr_username=jose
csr_password=Microsoft123!

# Create hub CSR as NVA
hub_csr_asn=65001
version=$(az vm image list -p $publisher -f $offer -s $sku --all --query '[0].version' -o tsv)
az vm image terms accept --urn ${publisher}:${offer}:${sku}:${version}
az vm create -n hub-nva -g $rg -l $location \
    --image ${publisher}:${offer}:${sku}:${version} \
    --admin-username "$csr_username" --admin-password $csr_password --authentication-type all --generate-ssh-keys \
    --public-ip-address hub-nva-pip --public-ip-address-allocation static \
    --vnet-name $vnet_name --subnet $csr_subnet_name \
    --private-ip-address $hub_csr_bgp_ip
hub_csr_nic_id=$(az vm show -n hub-nva -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
az network nic update --ids $hub_csr_nic_id --ip-forwarding

# Configure hub CSR with BGP
hub_csr_ip=$(az network public-ip show -n hub-nva-pip --query ipAddress -o tsv -g $rg)
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $hub_csr_ip "sh ip int b"
ssh -o BatchMode=yes -o StrictHostKeyChecking=no $hub_csr_ip <<EOF
config t
    no ip domain lookup
    interface Loopback 0
        ip address 1.1.1.1 255.255.255.255
    router bgp ${hub_csr_asn}
        network 1.1.1.1 mask 255.255.255.255
        neighbor $rs_ip1 remote-as $rs_asn
        neighbor $rs_ip1 ebgp-multihop 2
        neighbor $rs_ip2 remote-as $rs_asn
        neighbor $rs_ip2 ebgp-multihop 2
    ip route $rs_ip1 255.255.255.255 $csr_default_gw
    ip route $rs_ip2 255.255.255.255 $csr_default_gw
end
wr mem
EOF

# Test hub csr
# Route Server is reachable over ICMP :)
ssh $hub_nva_ip "ping $rs_ip1"
# Create peering
az network routeserver peering create --vrouter-name $rs_name -g $rg --peer-ip $hub_csr_bgp_ip --peer-asn $hub_csr_asn -n hub

# OPTIONAL: Inject default route from the hub's NVA:
az network route-table create -n hubnva -g $rg -l $location --disable-bgp-route-propagation
az network vnet subnet update -g $rg --vnet-name $vnet_name -n $csr_subnet_name --route-table hubnva
ssh -o BatchMode=yes -o StrictHostKeyChecking=no $hub_csr_ip <<EOF
config t
    ip route 0.0.0.0 128.0.0.0  $hub_csr_default_gw
    ip route 128.0.0.0 128.0.0.0  $hub_csr_default_gw
    router bgp ${hub_csr_asn}
        network 0.0.0.0 mask 128.0.0.0
        network 128.0.0.0 mask 128.0.0.0
        default-information originate
end
wr mem
EOF
# Patch NVA's NSG to allow incoming traffic from Vnet to Internet, and incoming from 8.8.8.8 and ifconfig.co
hub_csr_nic_id=$(az vm show -n hub-nva -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
hub_nva_nsg_id=$(az network nic show --ids $hub_csr_nic_id --query 'networkSecurityGroup.id' -o tsv)
hub_nva_nsg_name=$(basename $hub_nva_nsg_id)
az network nsg rule create -n Vnet2Internet --nsg-name $hub_nva_nsg_name -g $rg \
  --protocol '*' --access Allow --priority 100 --direction Inbound \
  --source-address-prefixes VirtualNetwork --source-port-ranges '*' \
  --destination-address-prefixes Internet --destination-port-ranges '*'
az network nsg rule create -n Internet2Vnet --nsg-name $hub_nva_nsg_name -g $rg \
  --protocol '*' --access Allow --priority 110 --direction Inbound \
  --source-address-prefixes 8.8.8.8/32 104.21.25.86/32 172.67.133.228/32 --source-port-ranges '*' \
  --destination-address-prefixes VirtualNetwork --destination-port-ranges '*'
az network nsg rule create -n Internet2VnetInside --nsg-name $hub_nva_nsg_name -g $rg \
  --protocol '*' --access Allow --priority 110 --direction Outbound \
  --source-address-prefixes 8.8.8.8/32 104.21.25.86/32 172.67.133.228/32 --source-port-ranges '*' \
  --destination-address-prefixes VirtualNetwork --destination-port-ranges '*'

# Create peered vnets with Ubuntu VM
# spoke 1
spoke1_name=spoke1
spoke1_prefix=10.11.0.0/16
spoke1_vm_subnet_name=vm
spoke1_vm_subnet_prefix=10.11.0.0/24
spoke1_csr_subnet_name=csr
spoke1_csr_subnet_prefix=10.11.1.0/24
az network vnet create -g $rg -n $spoke1_name --address-prefix $spoke1_prefix --subnet-name $spoke1_vm_subnet_name --subnet-prefix $spoke1_vm_subnet_prefix -l $location
az network vnet subnet create -n $spoke1_csr_subnet_name --address-prefix $spoke1_csr_subnet_prefix --vnet-name $spoke1_name -g $rg
# az network vnet peering delete -n hubtospoke1 -g $rg --vnet-name $vnet_name
# az network vnet peering delete -n spoke1tohub -g $rg --vnet-name $spoke1_name
az network vnet peering create -n hubtospoke1 -g $rg --vnet-name $vnet_name --remote-vnet $spoke1_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit
az network vnet peering create -n spoke1tohub -g $rg --vnet-name $spoke1_name --remote-vnet $vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways
az vm create -n spoke1-vm -g $rg -l $location --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address spoke1-vm-pip --vnet-name $spoke1_name --size Standard_B1s --subnet vm
spoke1_ip=$(az network public-ip show -n spoke1-vm-pip --query ipAddress -o tsv -g $rg)
spoke1_nic_id=$(az vm show -n spoke1-vm -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
spoke1_private_ip=$(az network nic show --ids $spoke1_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv) && echo $spoke1_private_ip

# spoke 2
spoke2_name=spoke2
spoke2_prefix=10.12.0.0/16
spoke2_subnet_name=vm
spoke2_subnet_prefix=10.12.0.0/24
az network vnet create -g $rg -n $spoke2_name --address-prefix $spoke2_prefix --subnet-name $spoke2_subnet_name --subnet-prefix $spoke2_subnet_prefix -l $location
az network vnet peering create -n hubtospoke2 -g $rg --vnet-name $vnet_name --remote-vnet $spoke2_name --allow-vnet-access --allow-forwarded-traffic --allow-gateway-transit
az network vnet peering create -n spoke2tohub -g $rg --vnet-name $spoke2_name --remote-vnet $vnet_name --allow-vnet-access --allow-forwarded-traffic --use-remote-gateways
az vm create -n spoke2-vm -g $rg -l $location --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address spoke2-vm-pip --vnet-name $spoke2_name --size Standard_B1s --subnet vm
spoke2_ip=$(az network public-ip show -n spoke2-vm-pip --query ipAddress -o tsv -g $rg)
spoke2_nic_id=$(az vm show -n spoke2-vm -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
spoke2_private_ip=$(az network nic show --ids $spoke2_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv) && echo $spoke2_private_ip

# effective routes
az network nic show-effective-route-table -n spoke1-vmVMNic -g $rg -o table

# Measure route injection time
# Create route in CSR
ssh -o BatchMode=yes -o StrictHostKeyChecking=no $csr_ip <<EOF
config t
    interface Loopback 10
        ip address 10.10.10.10 255.255.255.255
    router bgp 65500
        network 10.10.10.10 mask 255.255.255.255
end
EOF
start_time=$(date +%s)
echo "Interface created in CSR, now waiting for route to appear..."
route=$(az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o json | jq -r '.value | map(select(.addressPrefix[0] | contains("10.10.10.10/32"))) | .[]' 2>/dev/null)
until [[ -n "$route" ]]
do
    route=$(az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o json | jq -r '.value | map(select(.addressPrefix[0] | contains("10.10.10.10/32"))) | .[]' 2>/dev/null)
done
finish_time=$(date +%s)
run_time=$(($finish_time - $start_time))
((minutes=run_time/60))
((seconds=run_time%60))
echo "Route appeared after $minutes minutes and $seconds seconds"
# Result: around 30-45s

# Measure route removal time
ssh -o BatchMode=yes -o StrictHostKeyChecking=no $csr_ip <<EOF
config t
    no interface Loopback10
    router bgp 65500
        no network 10.10.10.10 mask 255.255.255.255
end
EOF
start_time=$(date +%s)
echo "Interface deleted in CSR, now waiting for route to disappear..."
route=$(az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o json | jq -r '.value | map(select(.addressPrefix[0] | contains("10.10.10.10/32"))) | .[]' 2>/dev/null)
until [[ -z "$route" ]]
do
    route=$(az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o json | jq -r '.value | map(select(.addressPrefix[0] | contains("10.10.10.10/32"))) | .[]' 2>/dev/null)
done
finish_time=$(date +%s)
run_time=$(($finish_time - $start_time))
((minutes=run_time/60))
((seconds=run_time%60))
echo "Route disappeared after $minutes minutes and $seconds seconds"
# Result: around 20-30s

# Check BGP in the NVA
ssh $csr_ip "sh ip bgp summary"
ssh $csr_ip "sh ip bgp"
ssh $csr_ip "sh ip route bgp"
ssh $csr_ip "sh ip bgp neig $rs_ip1 advertised-routes"
ssh $csr_ip "sh ip bgp neig $rs_ip1 routes"

# Connectivity to spoke
spokevm_ip=$(az network public-ip show -n spoke-vm-pip --query ipAddress -o tsv -g $rg)
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $spokevm_ip "ping 1.1.1.1 -c 5"

# Spoke-to-spoke connectivity
ssh -o BatchMode=yes -o StrictHostKeyChecking=no $csr_ip <<EOF
config t
    ip route 10.0.0.0 255.0.0.0 $csr_default_gw
    router bgp ${csr_asn}
        no redistribute static
        network 10.0.0.0 mask 255.0.0.0
end
wr mem
EOF

# Verify connectivity
# ICMP
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $spoke2_ip "ping $spoke1_private_ip -c 5"
# SSH from spoke to spoke (using one of them as jump host)
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no -J $spoke1_ip $spoke2_private_ip "ip a"

# Note the routes are injected in the NVA subnet too!
# Routes from NVA1 are not visible in NVA2's NIC:
# az network nic show-effective-route-table -n csr2-nvaVMNic -g $rg -o table
# Source                 State    Address Prefix    Next Hop Type          Next Hop IP
# ---------------------  -------  ----------------  ---------------------  -------------
# VirtualNetworkGateway  Active   1.1.1.1/32        VirtualNetworkGateway  10.0.1.10

# If routing to the Internet, a RT with DisableGWPropagation in the NVA subnet would be required

######################################
# Redundancy with AS path prepending #
######################################

# 2 NVAs, eBGP one with ASpath prepending: only one route:
# az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o table
# Source                 State    Address Prefix    Next Hop Type          Next Hop IP
# ---------------------  -------  ----------------  ---------------------  -------------
# VirtualNetworkGateway  Active   1.1.1.1/32        VirtualNetworkGateway  10.0.1.10

# If the 1ary appliance is rebooted, the other route would appear:
# az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o table
# Source                 State    Address Prefix    Next Hop Type          Next Hop IP
# ---------------------  -------  ----------------  ---------------------  -------------
# VirtualNetworkGateway  Active   1.1.1.1/32        VirtualNetworkGateway  10.0.1.20

# When the 1ary appliance comes back, the previous route is there again
# az network nic show-effective-route-table -n spoke2-vmVMNic -g $rg -o table
# Source                 State    Address Prefix    Next Hop Type          Next Hop IP
# ---------------------  -------  ----------------  ---------------------  -------------
# VirtualNetworkGateway  Active   1.1.1.1/32        VirtualNetworkGateway  10.0.1.10


#############
# Linux NVA #
#############

# TL;DR: not working, the nexthop for routes injected by the BGP NVA is always going to be itself
# To do: change this to test Quagga/Bird on Linux

# Reference:
# https://www.atlantic.net/vps-hosting/how-to-install-and-configure-strongswan-vpn-on-ubuntu-18-04/

# Create Ubuntu VM with Bird and StrongSwan
linuxnva_asn=65002
linuxnva_subnet_name=linuxnva
linuxnva_subnet_prefix=10.1.10.0/24
linuxnva_name=ubuntufw
linuxnva_pip=${linuxnva_name}-pip
linuxnva_cloudinit_file=/tmp/linuxnva_cloudinit.txt
cat <<EOF > $linuxnva_cloudinit_file
#cloud-config
runcmd:
  - apt update && apt install -y bird strongswan libcharon-extra-plugins strongswan-pki
  - sysctl -w net.ipv4.ip_forward=1
EOF
az network vnet subnet create --vnet-name $vnet_name --name $linuxnva_subnet_name -g $rg --address-prefixes $linuxnva_subnet_prefix
az network vnet subnet update -g $rg --vnet-name $vnet_name -n $linuxnva_subnet_name --route-table hubnva
az vm create -n $linuxnva_name -g $rg -l $location --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address $linuxnva_pip --vnet-name $vnet_name --size Standard_B1s --subnet $linuxnva_subnet_name \
    --custom-data $linuxnva_cloudinit_file 
linuxnva_nic_id=$(az vm show -n $linuxnva_name -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
az network nic update --ids $linuxnva_nic_id --ip-forwarding
linuxnva_pip_ip=$(az network public-ip show -n $linuxnva_pip -g $rg --query ipAddress -o tsv) && echo $linuxnva_pip_ip
linuxnva_private_ip=$(az network nic show --ids $linuxnva_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv) && echo $linuxnva_private_ip
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "ip a"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "systemctl status bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show route"
linuxnva_default_gw=$(ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip netstat -rnv | awk '$1 == "0.0.0.0" {print $2}') && echo $linuxnva_default_gw

# RS adjacency
az network routeserver peering create --vrouter-name $rs_name -g $rg --peer-ip $linuxnva_private_ip --peer-asn $linuxnva_asn -n linuxnva

# Bird config file
bird_config_file=/tmp/bird.conf
cat <<EOF > $bird_config_file
log syslog all;
router id $linuxnva_private_ip;
protocol device {
        scan time 10;           # Scan interfaces every 10 seconds
}
# Disable automatically generating direct routes to all network interfaces.
protocol direct {
      #disabled;               # Enabled by default
}
# Forbid synchronizing BIRD routing tables with the OS kernel.
protocol kernel {
      import all;       # Import to table, default is import all
      export none;      # Export to protocol. default is export none
}
# Static IPv4 routes.
protocol static {
      route 2.2.2.2/32 via $linuxnva_default_gw;
      route $subnet_prefix via $linuxnva_default_gw;
}
# BGP peers
protocol bgp uplink0 {
      description "RouteServer instance 0";
      multihop;
      local $linuxnva_private_ip as $linuxnva_asn;
      neighbor $rs_ip1 as $rs_asn;
          import filter {accept;};
          export filter {accept;};
}
protocol bgp uplink1 {
      description "RouteServer instance 1";
      multihop;
      local $linuxnva_private_ip as 65002;
      neighbor $rs_ip2 as $rs_asn;
          import filter {accept;};
          export filter {accept;};
}
EOF
linuxnva_user=$(ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "whoami") && echo $linuxnva_user
scp $bird_config_file "${linuxnva_pip_ip}:/home/${linuxnva_user}/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo mv /home/${linuxnva_user}/bird.conf /etc/bird/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo systemctl restart bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "systemctl status bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show route"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip 'sudo birdc sh prot "uplink*"'
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show protocols all"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show protocols uplink0"

# Next hop is always the CSR, regardless if advertised via network or redistribute, if eBGP or iBGP.
# Even if hte CSR announces it with the right next hop, the RS seems to override the next hop:
# csr-nva#sh ip bgp neig 10.0.0.4 advertised-routes             
# BGP table version is 30, local router ID is 10.10.10.10
# Status codes: s suppressed, d damped, h history, * valid, > best, i - internal, 
#               r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, 
#               x best-external, a additional-path, c RIB-compressed, 
#               t secondary path, L long-lived-stale,
# Origin codes: i - IGP, e - EGP, ? - incomplete
# RPKI validation codes: V valid, I invalid, N Not found

#      Network          Next Hop            Metric LocPrf Weight Path
#  *>   10.0.0.0         10.0.2.4                 0         32768 ?
# Get-AzVirtualRouterPeerLearnedRoute -ResourceGroupName routeserver -virtualroutername myRouteServer -peername csr | ft
# LocalAddress Network          NextHop   SourcePeer Origin AsPath Weight
# ------------ -------          -------   ---------- ------ ------ ------
# 10.0.0.4     10.0.0.0/8       10.0.1.10 10.0.1.10  IBgp           32768

################
# ExpressRoute #
################

# Create ER and ER Gateway
ergw_name=ergw
ergw_pip="${ergw_name}-pip"
er_location=germanywestcentral
er_pop=Frankfurt
er_provider=Megaport
er_circuit_name=tester
az network public-ip create -g $rg -n $ergw_pip --allocation-method Dynamic --sku Basic
az network vnet subnet create -g $rg --vnet-name $vnet_name -n GatewaySubnet --address-prefix $gw_subnet_prefix
az network vnet-gateway create -g $rg -n $ergw_name --gateway-type ExpressRoute --sku Standard -l $location --vnet $vnet_name --public-ip-addresses $ergw_pip --no-wait
az network express-route create -n $er_circuit_name --peering-location $er_pop -g $rg \
    --bandwidth 50 --provider $er_provider -l $er_location --sku-family MeteredData --sku-tier Standard
# After provisioning circuit in Megaport portal continue
circuit_id=$(az network express-route show -n $er_circuit_name -g $rg -o tsv --query id) && echo $circuit_id
az network vpn-connection create -n erconnection2 -g $rg --vnet-gateway1 $ergw_name --express-route-circuit2 $circuit_id

# Configure Route Server to exchange routes with Vnet Gateways
az network routeserver update -n $rs_name -g $rg --set allowBranchToBranchTraffic=true

# BGP neighbors of ER gateway should show the two Route Server instances
az network vnet-gateway list-bgp-peer-status -n $ergw_name -g $rg -o table

#######
# VPN #
#######

# Azure VPN Gateway gets created in Failed state in my RG, not sure where the problem is 

# Create VPN Gateway
gw_subnet_prefix=10.0.254.0/24
vpngw_name=vpngw
vpngw_asn=65500
vpngw_pip="${vpngw_name}-pip"
az network vnet subnet create -g $rg --vnet-name $vnet_name -n GatewaySubnet --address-prefix $gw_subnet_prefix
az network public-ip create -g $rg -n $vpngw_pip --allocation-method Dynamic --sku Basic
az network vnet-gateway create -g "$rg" --sku VpnGw1 --gateway-type Vpn --vpn-type RouteBased \
            --vnet "$vnet_name" -n $vpngw_name --asn "$vpngw_asn" --public-ip-address $vpngw_pip --no-wait

#####################
# Onprem simulation #
#####################

# Initialization
onprem_vnet_name=onprem
onprem_vnet_prefix=192.168.0.0/16
onprem_nva_subnet_name=onprem
onprem_nva_subnet_prefix=192.168.0.0/24
onprem_gw_subnet_name=GatewaySubnet
onprem_gw_subnet_prefix=192.168.1.0/24
az network vnet create -n $onprem_vnet_name -g $rg --address-prefixes $onprem_vnet_prefix --subnet-name $onprem_nva_subnet_name --subnet-prefixes $onprem_nva_subnet_prefix
az network vnet subnet create -g $rg --vnet-name $onprem_vnet_name -n GatewaySubnet --address-prefix $onprem_gw_subnet_prefix
az network route-table create -n onpremnva -g $rg -l $location --disable-bgp-route-propagation
az network vnet subnet update -g $rg --vnet-name $onprem_vnet_name -n $onprem_nva_subnet_name --route-table onpremnva

# Create ER and ER Gateway to simulate onprem
ergw_name=onpremergw
ergw_pip="${ergw_name}-pip"
er_location=germanywestcentral
er_pop=Frankfurt
er_provider=Megaport
er_circuit_name=onpremer
az network public-ip create -g $rg -n $ergw_pip --allocation-method Dynamic --sku Basic
az network vnet-gateway create -g $rg -n $ergw_name --gateway-type ExpressRoute --sku Standard -l $location \
    --vnet $onprem_vnet_name --public-ip-addresses $ergw_pip --no-wait
az network express-route create -n $er_circuit_name --peering-location $er_pop -g $rg \
    --bandwidth 50 --provider $er_provider -l $er_location --sku-family MeteredData --sku-tier Standard
# After provisioning circuit in Megaport portal continue
circuit_id=$(az network express-route show -n $er_circuit_name -g $rg -o tsv --query id) && echo $circuit_id
az network vpn-connection create -n erconnection -g $rg --vnet-gateway1 $ergw_name --express-route-circuit2 $circuit_id

# Create onprem Linux NVA
onprem_linuxnva_asn=65102
onprem_linuxnva_name=onpremnva
onprem_linuxnva_pip=${onprem_linuxnva_name}-pip
onprem_linuxnva_ip=192.168.0.20
linuxnva_cloudinit_file=/tmp/linuxnva_cloudinit.txt
cat <<EOF > $linuxnva_cloudinit_file
#cloud-config
runcmd:
  - apt update && apt install -y bird strongswan
  - sysctl -w net.ipv4.ip_forward=1
  - sysctl -w net.ipv4.conf.all.accept_redirects = 0 
  - sysctl -w net.ipv4.conf.all.send_redirects = 0
EOF
az vm create -n $onprem_linuxnva_name -g $rg -l $location --image ubuntuLTS --generate-ssh-keys \
    --public-ip-address $onprem_linuxnva_pip --vnet-name $onprem_vnet_name --size Standard_B1s --subnet $onprem_nva_subnet_name \
    --custom-data $linuxnva_cloudinit_file --private-ip-address "$onprem_linuxnva_ip"
onprem_linuxnva_nic_id=$(az vm show -n $onprem_linuxnva_name -g "$rg" --query 'networkProfile.networkInterfaces[0].id' -o tsv)
az network nic update --ids $onprem_linuxnva_nic_id --ip-forwarding
onprem_linuxnva_pip_ip=$(az network public-ip show -n $onprem_linuxnva_pip -g $rg --query ipAddress -o tsv) && echo $onprem_linuxnva_pip_ip
onprem_linuxnva_private_ip=$(az network nic show --ids $onprem_linuxnva_nic_id --query 'ipConfigurations[0].privateIpAddress' -o tsv) && echo $onprem_linuxnva_private_ip
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "ip a"
onprem_linuxnva_default_gw=$(ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip netstat -rnv | awk '$1 == "0.0.0.0" {print $2}') && echo $onprem_linuxnva_default_gw
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "systemctl status bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo birdc show route"

# Configure StrongSwan VPN
# See https://blog.sys4.de/routing-based-vpn-with-strongswan-de.html
# See https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN
echo "Configuring VPN between A:${linuxnva_pip_ip}/${linuxnva_private_ip} and B:${onprem_linuxnva_pip_ip}/${onprem_linuxnva_private_ip}"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo ip tunnel add vti0 local $linuxnva_private_ip remote $onprem_linuxnva_pip_ip mode vti key 12"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo sysctl -w net.ipv4.conf.vti0.disable_policy=1"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo ip link set up dev vti0"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo ip route add $onprem_private_ip/32 dev vti0"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo sed -i 's/# install_routes = yes/install_routes = no/' /etc/strongswan.d/charon.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo ip tunnel add vti0 local $onprem_linuxnva_private_ip remote $linuxnva_pip_ip mode vti key 12"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo sysctl -w net.ipv4.conf.vti0.disable_policy=1"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo ip link set up dev vti0"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo ip route add $private_ip/32 dev vti0"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo sed -i 's/# install_routes = yes/install_routes = no/' /etc/strongswan.d/charon.conf"
vpn_psk=$(openssl rand -base64 64)
vpn_psk=${vpn_psk//$'\n'/}  # Remove line breaks
psk_file_a=/tmp/ipsec.secrets.a
psk_file_b=/tmp/ipsec.secrets.b
cat <<EOF > $psk_file_a
$linuxnva_pip_ip $onprem_linuxnva_pip_ip : PSK "$vpn_psk"
EOF
cat <<EOF > $psk_file_b
$onprem_linuxnva_pip_ip $linuxnva_pip_ip : PSK "$vpn_psk"
EOF
ipsec_file_a=/tmp/ipsec.conf.a
ipsec_file_b=/tmp/ipsec.conf.b
cat <<EOF > $ipsec_file_a
config setup
        charondebug="all"
        uniqueids=yes
        strictcrlpolicy=no
conn to-onprem
  authby=secret
  leftid=$linuxnva_pip_ip
  leftsubnet=0.0.0.0/0
  right=$onprem_linuxnva_pip_ip
  rightsubnet=0.0.0.0/0
  ike=aes256-sha2_256-modp1024!
  esp=aes256-sha2_256!
  keyingtries=0
  ikelifetime=1h
  lifetime=8h
  dpddelay=30
  dpdtimeout=120
  dpdaction=restart
  auto=start
  mark=12
EOF
cat <<EOF > $ipsec_file_b
config setup
        charondebug="all"
        uniqueids=yes
        strictcrlpolicy=no
conn to-azure
  authby=secret
  leftid=$onprem_linuxnva_pip_ip
  leftsubnet=0.0.0.0/0
  right=$linuxnva_pip_ip
  rightsubnet=0.0.0.0/0
  ike=aes256-sha2_256-modp1024!
  esp=aes256-sha2_256!
  keyingtries=0
  ikelifetime=1h
  lifetime=8h
  dpddelay=30
  dpdtimeout=120
  dpdaction=restart
  auto=start
  mark=12
EOF
username=$(whoami)
scp $psk_file_a $linuxnva_pip_ip:/home/$username/ipsec.secrets
scp $psk_file_b $onprem_linuxnva_pip_ip:/home/$username/ipsec.secrets
scp $ipsec_file_a $linuxnva_pip_ip:/home/$username/ipsec.conf
scp $ipsec_file_b $onprem_linuxnva_pip_ip:/home/$username/ipsec.conf
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo mv ./ipsec.* /etc/"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo systemctl restart ipsec"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo mv ./ipsec.* /etc/"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo systemctl restart ipsec"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "systemctl status ipsec"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "systemctl status ipsec"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo ipsec status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo ipsec status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "ping $onprem_linuxnva_private_ip -c 5"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "ping $linuxnva_private_ip -c 5"

# Configure BGP with Bird
bird_config_file=/tmp/bird.conf
cat <<EOF > $bird_config_file
log syslog all;
router id $onprem_linuxnva_private_ip;
protocol device {
        scan time 10;
}
protocol direct {
      #disabled;
}
protocol kernel {
      import all;
      export none;
}
protocol static {
      route 3.3.3.3/32 via $onprem_linuxnva_default_gw;
      route $subnet_prefix via $linuxnva_default_gw;
}
protocol bgp uplink0 {
      description "BGP to Azure";
      multihop;
      local $onprem_linuxnva_private_ip as $onprem_linuxnva_asn;
      neighbor $linuxnva_private_ip as $linuxnva_asn;
          import filter {accept;};
          export filter {accept;};
}
EOF
scp $bird_config_file "${onprem_linuxnva_pip_ip}:/home/${username}/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo mv /home/${linuxnva_user}/bird.conf /etc/bird/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo systemctl restart bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "systemctl status bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo birdc show status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $onprem_linuxnva_pip_ip "sudo birdc show route"
bird_config_file=/tmp/bird.conf
cat <<EOF > $bird_config_file
protocol bgp uplink2 {
      description "BGP to Azure";
      multihop;
      local $linuxnva_private_ip as $linuxnva_asn;
      neighbor $onprem_linuxnva_private_ip as $onprem_linuxnva_asn;
          import filter {accept;};
          export filter {accept;};
}
EOF
scp $bird_config_file "${linuxnva_pip_ip}:/home/${username}/bird.conf.new"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "cat /home/${linuxnva_user}/bird.conf.new"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo cat /etc/bird/bird.conf /home/${linuxnva_user}/bird.conf.new >/home/${linuxnva_user}/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo mv /home/${linuxnva_user}/bird.conf /etc/bird/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo more /etc/bird/bird.conf"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo systemctl restart bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "systemctl status bird"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show status"
ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no $linuxnva_pip_ip "sudo birdc show route"

# Create onprem CSR
nva_size=Standard_B2ms
onprem_csr_ip=192.168.0.10
publisher=cisco
offer=cisco-csr-1000v
sku=16_12-byol
version=$(az vm image list -p $publisher -f $offer -s $sku --all --query '[0].version' -o tsv 2>/dev/null)
az vm create -n onprem-csr -g "$rg" -l "$location" --image "${publisher}:${offer}:${sku}:${version}" --size "$nva_size" \
    --generate-ssh-keys --public-ip-address "onprem-csr-pip" --public-ip-address-allocation static \
    --vnet-name "$onprem_vnet_name" --subnet "$onprem_nva_subnet_name" \
    --private-ip-address "$onprem_csr_ip"

# Configure onprem CSR for VPN
onprem_default_gw=192.168.0.1
vpngw_pip_ip=$(az network public-ip show -n $vpngw_pip -g $rg --query ipAddress -o tsv)
vpngw_bgp_ip=$(az network vnet-gateway show -n $vpngw_name -g $rg --query bgpSettings.)
vpngw_bgp_asn=$(az network vnet-gateway show -n $vpngw_name -g $rg --query bgpSettings.asn)
onprem_asn=65200
ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o KexAlgorithms=+diffie-hellman-group14-sha1 "$onprem_csr_ip"
    config t
      crypto ikev2 proposal azure-proposal
        encryption aes-cbc-256 aes-cbc-128 3des
        integrity sha1
        group 2
      crypto ikev2 policy azure-policy
        proposal azure-proposal
      crypto ikev2 profile azure-profile
        match address local interface GigabitEthernet1
        authentication remote pre-share
        authentication local pre-share
        keyring local azure-keyring
      crypto ipsec transform-set azure-ipsec-proposal-set esp-aes 256 esp-sha-hmac
        mode tunnel
      crypto ipsec profile azure-vti
        set security-association lifetime kilobytes 102400000
        set transform-set azure-ipsec-proposal-set
        set ikev2-profile azure-profile
      crypto isakmp policy 1
        encr aes
        authentication pre-share
        group 14
      crypto ipsec transform-set csr-ts esp-aes esp-sha-hmac
        mode tunnel
      crypto ikev2 keyring azure-keyring
        peer ${vpngw_pip_ip}
          address ${vpngw_pip_ip}
          pre-shared-key ${ipsec_psk}
      crypto ikev2 profile azure-profile
        match identity remote address ${vpngw_pip_ip} 255.255.255.255
      crypto isakmp key ${psk} address ${vpngw_pip_ip}
      interface Tunnel0
        ip unnumbered GigabitEthernet1
        ip tcp adjust-mss 1350
        tunnel source GigabitEthernet1
        tunnel mode ipsec ipv4
        tunnel destination ${vpngw_pip_ip}
        tunnel protection ipsec profile azure-vti
      router bgp ${onprem_asn}
        bgp router-id interface GigabitEthernet1
        bgp log-neighbor-changes
        redistribute ospf 100 route-map O2B
        redistribute static route-map S2B
        maximum-paths eibgp 4
        neighbor ${vpngw_bgp_ip} remote-as ${vpngw_bgp_asn}
        neighbor ${vpngw_bgp_ip} update-source GigabitEthernet1
        neighbor ${vpngw_bgp_ip} ebgp-multihop 5
      ip route ${vpngw_bgp_ip} 255.255.255.255 Tunnel0
      ip route ${vpngw_pip_ip} 255.255.255.255 ${onprem_default_gw}
    end
    wr mem
EOF

# Create onprem Linux NVA

###############
# Diagnostics #
###############

az network routeserver list -g $rg -o table
az network routeserver show -n $rs_name -g $rg
az network routeserver peering list --vrouter-name $rs_name -g $rg -o table
az network routeserver peering show -n csr --vrouter-name $rs_name -g $rg

########################
# REST not working yet #
########################

# REST: routeserver
subscription=$(az account show --query id -o tsv)
version=2020-07-01
url="https://management.azure.com/subscriptions/${subscription}/resourceGroups/${rg}/providers/Microsoft.Network/virtualRouters/${rs_name}?api-version=${version}"
url="https://management.azure.com/subscriptions/${subscription}/resourceGroups/${rg}/providers/Microsoft.Network/virtualHubs/${rs_name}?api-version=${version}"
az rest --method get --url $url

# REST: peering
subscription=$(az account show --query id -o tsv)
version=2020-07-01
url="https://management.azure.com/subscriptions/${subscription}/resourceGroups/${rg}/providers/Microsoft.Network/virtualRouters/${rs_name}/peerings/csr?api-version=${version}"
az rest --method get --url $rl
